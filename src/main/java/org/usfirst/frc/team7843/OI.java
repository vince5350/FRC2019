// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team7843;

import edu.wpi.first.wpilibj.GenericHID.Hand;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS



    public XboxController driveController;
    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS



        // SmartDashboard Buttons

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveController = new XboxController(0);
    
    
    }


    public XboxController getDriveController() {
        return driveController;
    }
    
    public boolean getSelect(){
    	boolean joySelect = driveController.getBackButton();
    	return joySelect;
    }
    
    public boolean getBumperRight() {
    	boolean joyBumpR = driveController.getBumper(Hand.kRight);
    	return joyBumpR;
    }
    
    public boolean getBumperLeft() {
    	boolean joyBumpL = driveController.getBumper(Hand.kLeft);
    	return joyBumpL;
    }
    
    public boolean getButtonA() {
    	boolean joyA = driveController.getAButton();
    	return joyA;
    }
    
    public boolean getButtonB() {
    	boolean joyB = driveController.getBButton();
    	return joyB;
    }
    
    public boolean getButtonX() {
    	boolean joyX = driveController.getXButton();
    	return joyX;
    }
    
    public boolean getButtonY() {
    	boolean joyY = driveController.getYButton();
    	return joyY;
    }
    
    public double getJoyXRight() {
    	double joyXRight = driveController.getX(Hand.kRight);
    	return joyXRight;
    }
    
    public double getJoyXLeft() {
    	double joyXLeft = driveController.getX(Hand.kLeft);
    	return joyXLeft;
    }
    
    public double getJoyYRight() {
    	double joyYRight = driveController.getY(Hand.kRight);
    	return joyYRight;
    }
    
    public double getJoyYLeft() {
    	double joyYLeft = driveController.getY(Hand.kLeft);
    	return joyYLeft;
    }
    
    public double getRightTrigger() {
    	double joyRT = driveController.getTriggerAxis(Hand.kRight);
    	return joyRT;
    }
    
    public double getLeftTrigger() {
    	double joyLT = driveController.getTriggerAxis(Hand.kLeft);
    	return joyLT;
    }
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

